(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{602:function(t,a,s){"use strict";s.r(a);var r=s(12),v=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"异步编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异步编程"}},[t._v("#")]),t._v(" 异步编程")]),t._v(" "),s("h2",{attrs:{id:"js的进程与线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js的进程与线程"}},[t._v("#")]),t._v(" js的进程与线程")]),t._v(" "),s("ul",[s("li",[t._v("js单线程是值执行代码的线程是单线程的")]),t._v(" "),s("li",[t._v("异步会有异步调用线程\n"),s("ul",[s("li",[t._v("定时器线程")])])]),t._v(" "),s("li",[t._v("浏览器的每一个页面可以看做是浏览器内核进程")]),t._v(" "),s("li",[t._v("单个进程下面会有多个线程来互相配合完成任务\n"),s("ul",[s("li",[t._v("比如 GUI线程、JS引擎线程、网络线程、定时器线程等")])])])]),t._v(" "),s("h2",{attrs:{id:"同步模式-异步模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同步模式-异步模式"}},[t._v("#")]),t._v(" 同步模式&异步模式")]),t._v(" "),s("h3",{attrs:{id:"同步模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同步模式"}},[t._v("#")]),t._v(" 同步模式")]),t._v(" "),s("ul",[s("li",[t._v("排队执行模式，把代码放入 调用栈 执行完  在推出调用栈")]),t._v(" "),s("li",[t._v("函数内嵌函数，就是 外函数 入栈-内涵入栈-执行内涵上出栈 -外函数出栈")])]),t._v(" "),s("h3",{attrs:{id:"异步模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异步模式"}},[t._v("#")]),t._v(" 异步模式")]),t._v(" "),s("ul",[s("li",[t._v("不阻塞主线程的执行，等待主线程执行完毕后再调用这个函数")])]),t._v(" "),s("h3",{attrs:{id:"任务队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#任务队列"}},[t._v("#")]),t._v(" 任务队列")]),t._v(" "),s("ul",[s("li",[t._v("任务队列可以当做是一个个的对调任务，当主线程的任务完成后，就开始执行任务队列中的任务（如果当前任务队列中再添加了新的异步任务，则其回调函数会放在之后的任务队列中）")])]),t._v(" "),s("h3",{attrs:{id:"事件循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件循环"}},[t._v("#")]),t._v(" 事件循环")]),t._v(" "),s("ul",[s("li",[t._v("异步任务执行后，其回调会放到任务队列中。当主线程任务执行结束后，就去任务队列中捞接下来要做的任务，放到主线程中执行，直到任务全部结束。如果无新的任务可做，浏览器处于等待状态，知道新的外部输入、事件触发，这样一个循环过程称为事件循环。")])]),t._v(" "),s("h3",{attrs:{id:"执行栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行栈"}},[t._v("#")]),t._v(" 执行栈")]),t._v(" "),s("p",[t._v("执行栈是解释器追踪函数执行流的一种机制。当引擎第一次遇到js代码时，会产生一个全局执行上下文压入执行栈，每遇到一个函数调用，就往栈中压入一个新的上下文。引擎执行栈顶的函数后则弹出当前执行上下文直至函数依次执行完毕并回到全局的上下文。")])])}),[],!1,null,null,null);a.default=v.exports}}]);